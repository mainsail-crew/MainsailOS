name: "Release"

on:
  push:
    branches:
      - "develop"
  workflow_dispatch:
    inputs:
      release:
        description: 'Publish as Release'
        type: boolean
        default: false
      version:
        description: 'Release-Version (Format: X.Y.Z or X.Y.Z-alpha.N)'
        type: string
        required: false

jobs:
  prepare-release:
    if: ${{ github.event.inputs.release == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        with:
          ref: "develop"
          fetch-depth: 0

      - name: "üîé Check release number"
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "::error::Version '$VERSION' is not SemVer compliant. Required format: X.Y.Z or X.Y.Z-alpha.N"
            exit 1
          fi

          echo "Version '$VERSION' is SemVer compliant."

      - name: "Get latest tag"
        id: latest_tag
        shell: bash
        run: |
          echo "TAG_NAME=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT

      - name: "Setup git config"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: "Update VERSION file"
        run: |
          echo "${{ github.event.inputs.version }}" > VERSION
          git add VERSION
          git commit -m "chore: bump version to v${{ github.event.inputs.version }}"
          git push

      - name: "Push tag"
        run: |
          git tag -a ${{ github.event.inputs.version }} -m "${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}

      - name: "Generate a changelog"
        uses: orhun/git-cliff-action@v4
        id: changelog
        with:
          config: cliff-release.toml
          args: ${{ steps.latest_tag.outputs.TAG_NAME }}..HEAD

      - name: "Create Release"
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: MainsailOS ${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.content }}
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
      branch: ${{ steps.select_branch.outputs.branch }}
    steps:
      - name: "Select build branch"
        id: select_branch
        run: |
          if [[ "${{ github.input.release }}" == "true" ]]; then
            echo "Using develop branch"
            echo "branch=develop" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Using current branch"
          echo "branch=${{ github.ref }}" >> $GITHUB_OUTPUT

      - name: "üì• Checkout"
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.select_branch.outputs.branch }}

      - name: "üõ† Generate matrix from config.yml"
        id: create-matrix
        run: |
          python3 - <<'EOF'
          import os, yaml, json
          with open("config.yml", "r") as f:
              config = yaml.safe_load(f)
          matrix = {"include": config}
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"matrix={json.dumps(matrix)}", file=fh)
          EOF

  build:
    needs: [ prepare-release, generate-matrix ]
    # workaround, because prepare-release is not always executed
    if: |
      ${{
          needs.generate-matrix.result == 'success' && (
              (github.event.inputs.release != 'true' && needs.prepare-release.result == 'skipped') ||
              (github.event.inputs.release == 'true' && needs.prepare-release.result == 'success')
          )
      }}
    runs-on: ubuntu-22.04-arm
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.generate-matrix.outputs.branch }}

      - name: "#Ô∏è‚É£Ô∏è Set RELEASE_TAG from VERSION file"
        run: |
          RELEASE_TAG=$(cat VERSION | tr -d '\n')
          DATE="$(date +"%Y-%m-%d")"

          echo "DATE=${DATE}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

      - name: "üìÅ Create directories"
        run: |
          mkdir -p build
          mkdir -p scripts

      - name: "‚¨á Download Image via Torrent"
        if: ${{ endsWith(matrix.img_download_url, '.torrent') }}
        run: aria2c -d build --seed-time=0 --enable-dht=false "${{ matrix.img_download_url }}"

      - name: "‚¨á Download Image via wget"
        if: ${{ !endsWith(matrix.img_download_url, '.torrent') }}
        working-directory: ./build
        run: wget ${{ matrix.img_download_url }}

      - name: "üîê Verify image"
        working-directory: ./build
        run: curl -Ls ${{  matrix.img_hash_url }} | sha256sum -c

      - name: "üõ† Unpack and rename image"
        working-directory: ./build
        run: |
          # search for the image file in the build directory
          IMG_FILE=$(ls *.img.xz | head -n 1)
          echo "Found compressed Image file: ${IMG_FILE}"

          # extract the image file
          xz -d "${IMG_FILE}"

          DECOMPRESSED_FILE="${IMG_FILE%.xz}"
          echo "Image file: ${DECOMPRESSED_FILE}"

          # rename the image file
          mv "${DECOMPRESSED_FILE}" input.img

      - name: "üìã Copy generic and type scripts"
        run: |
          cp -r modules/generic/* scripts/
          cp -r modules/${{ matrix.type }}/* scripts/
          for file in scripts/*.disabled; do
            if [ -e "$file" ]; then
              rm "$file"
            fi
          done

      - name: "üìã Copy special modules"
        run: |
          # Check if special_modules are defined for this configuration
          if [ -n "${{ toJson(matrix.special_modules) }}" ] && [ "${{ toJson(matrix.special_modules) }}" != "[]" ]; then
            # copy additional files for special modules
            if [ -d "modules/special/files" ]; then
              cp -r modules/special/files/* scripts/files/
            fi

            # Convert JSON array to bash array
            MODULES=$(echo '${{ toJson(matrix.special_modules) }}' | jq -r '.[]')

            for module in "${MODULES[@]}"; do
              cp "modules/special/${module}" scripts/
            done
          else
            echo "No special modules defined for ${{ matrix.name }}."
          fi

      - name: "üìá Generate config.local"
        run: |
          echo "Generating config.local file..."
          python3 - <<'EOF'
          import os, json
          env_vars = json.loads(os.environ.get("MATRIX_ENV", "{}"))
          with open("config.local", "w") as f:
              for key, value in env_vars.items():
                  if not key.startswith("EDITBASE_"):
                      key = "EDITBASE_" + key
                  f.write(f"{key}={value}\n")
          EOF
        env:
          MATRIX_ENV: ${{ toJson(matrix.env) }}

      - name: "üîé Show scripts"
        working-directory: ./scripts
        run: ls -la

      - name: "üèó Run CustoPiZer"
        uses: OctoPrint/CustoPiZer@v1
        with:
          workspace: "${{ github.workspace }}/build"
          scripts:  "${{ github.workspace }}/scripts"
          config: "${{ github.workspace }}/config.local"
          environment: '{ "RELEASE_TAG": "${{ env.RELEASE_TAG }}"}'

#      - name: "üèó Create fake CustoPiZer"
#        working-directory: ./build
#        run: |
#          echo "Creating fake CustoPiZer build..."
#          mv input.img output.img

      - name: "‚úè Rename image"
        working-directory: ./build
        run: |
          IMAGE="${{ env.DATE }}-MainsailOS-${{ matrix.name }}-${{ env.RELEASE_TAG }}.img"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

          mv output.img "${IMAGE}"

      - name: "üõ† Compressing Image"
        working-directory: ./build
        run: |
          CPU_COUNT="$(nproc)"
          echo -e "\e[32mUsing ${CPU_COUNT} Cores for compression...\e[0m"
          xz -efkvz9T"${CPU_COUNT}" ${{ env.IMAGE }} || true
#          touch ${{ env.IMAGE }}.xz
#          echo "Fake compressing image" >> ${{ env.IMAGE }}.xz

      - name: "üîê Create hash"
        id: hashes
        working-directory: ./build
        run: |
          sha256sum ${{ env.IMAGE }} > ${{ env.IMAGE }}.sha256
          image_checksum=`cat ${{ env.IMAGE }}.sha256 | awk '{ print $1 }'`
          echo "image=${image_checksum}" >> $GITHUB_OUTPUT

          sha256sum ${{ env.IMAGE }}.xz > ${{ env.IMAGE }}.xz.sha256
          zip_checksum=`cat ${{ env.IMAGE }}.xz.sha256 | awk '{ print $1 }'`
          echo "zip=${zip_checksum}" >> $GITHUB_OUTPUT

      - name: "Calculating filesizes"
        id: filesizes
        working-directory: ./build
        run: |
          image_filesize=`wc -c ${{ env.IMAGE }} | awk '{print $1}'`
          echo "image=${image_filesize}" >> $GITHUB_OUTPUT

          zip_filesize=`wc -c ${{ env.IMAGE }}.xz | awk '{print $1}'`
          echo "zip=${zip_filesize}" >> $GITHUB_OUTPUT

      - name: "üîß Generate RPI JSON file"
        if: ${{ matrix.rpi_json != null }}
        run: |
          python3 - <<'EOF'
          import json, os
          from datetime import datetime

          matrix = ${{ toJson(matrix) }}

          rpi_data = matrix['rpi_json'].copy()

          # set name, if it is not set
          if 'name' not in rpi_data:
              rpi_data['name'] = "MainsailOS $VERSION$"

          # replace $VERSION$ in name
          rpi_data['name'] = rpi_data['name'].replace('$VERSION$', "${{ env.RELEASE_TAG }}")

          filename = "${{ env.IMAGE }}.xz"
          repo = "${{ github.repository_owner }}/${{ github.repository }}"
          release_tag = "${{ env.RELEASE_TAG }}"
          rpi_data['url'] = f"https://github.com/{repo}/releases/download/{release_tag}/{filename}"
          rpi_data['release_date'] = "${{ env.DATE }}"
          rpi_data['extract_size'] = ${{ steps.filesizes.outputs.image }}
          rpi_data['image_download_size'] = ${{ steps.filesizes.outputs.zip }}
          rpi_data['extract_sha256'] = "${{ steps.hashes.outputs.image }}"

          os.makedirs('build', exist_ok=True)
          json_path = "build/${{ env.IMAGE }}.json"
          with open(json_path, 'w') as f:
              json.dump(rpi_data, f, indent=2)
              print("Generated JSON file for ${{ env.IMAGE }}.json")

          EOF

      - name: "üìã Upload JSON to Artifact"
        if: ${{ matrix.rpi_json != null && github.event.inputs.release != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE }}.json
          path: build/${{ env.IMAGE }}.json

      - name: "üìã Upload Compressed Image to Artifact"
        if: ${{ github.event.inputs.release != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE }}.xz
          path: build/${{ env.IMAGE }}.xz

      - name: "üìã Upload Compressed Image Checksum to Artifact"
        if: ${{ github.event.inputs.release != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE }}.xz.sha256
          path: build/${{ env.IMAGE }}.xz.sha256

      - name: "üìã Upload Image Checksum to Artifact"
        if: ${{ github.event.inputs.release != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE }}.sha256
          path: build/${{ env.IMAGE }}.sha256

      - name: "üìã Upload to Release"
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ env.RELEASE_TAG }}"

          gh release upload "$TAG" "build/${{ env.IMAGE }}.sha256" --clobber
          gh release upload "$TAG" "build/${{ env.IMAGE }}.xz" --clobber
          gh release upload "$TAG" "build/${{ env.IMAGE }}.xz.sha256" --clobber

          if [ -f "build/${{ env.IMAGE }}.json" ]; then
            gh release upload "$TAG" "build/${{ env.IMAGE }}.json" --clobber
          fi

  finish-release:
    needs: [ build ]
    if: ${{ github.event.inputs.release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: "Publish Release"
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: gh release edit "${{ github.event.inputs.version }}" --draft=false

  update-changelog:
    needs: [ build ]
    if: ${{ github.event.inputs.release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        with:
          ref: "develop"
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: "Generate a changelog"
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
        env:
          OUTPUT: CHANGELOG.md

      - name: "Setup git config"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: "Commit updated changelog"
        run: |
          git add CHANGELOG.md
          git commit -m "docs(changelog): update changelog"
          git push

  merge-develop-to-master:
    needs: [ update-changelog ]
    if: ${{ github.event.inputs.release == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4
        with:
          ref: "master"
          fetch-depth: 0

      - name: "FF merge to master"
        uses: MaximeHeckel/github-action-merge-fast-forward@v1.1.0
        with:
          branchtomerge: origin/develop
          branch: master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
