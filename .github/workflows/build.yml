name: Build und Customizer Workflow

on:
  push:
    branches:
      - "develop"
  workflow_dispatch:

concurrency:
  group: ci-build-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate matrix from config.yml
        id: create-matrix
        run: |
          python3 - <<'EOF'
          import os, yaml, json
          with open("config.yml", "r") as f:
              config = yaml.safe_load(f)
          matrix = {"include": config}
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"matrix={json.dumps(matrix)}", file=fh)
          EOF

  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: ":zap: Checkout"
        uses: actions/checkout@v4

      - name: Create directories
        run: |
          mkdir -p build
          mkdir -p scripts

      - name: "‚¨á Download hash"
        id: checksum
        shell: bash
        run: |
          cd build
          wget -O image.hash "${{ matrix.img_hash_url }}"
          FILE_CONTENT=$(head -n 1 image.hash)
          CHECKSUM=$(echo "$FILE_CONTENT" | cut -d' ' -f1)

          echo "CHECKSUM=${CHECKSUM}" >> "$GITHUB_OUTPUT"
          echo "FILENAME=image.hash" >> "$GITHUB_OUTPUT"

      - name: "‚¨á Download Image via Torrent"
        if: ${{ endsWith(matrix.img_download_url, '.torrent') }}
        shell: bash
        run: |
          aria2c -d build --seed-time=0 "${{ matrix.img_download_url }}"

      - name: "‚¨á Download Image via wget"
        if: ${{ !endsWith(matrix.img_download_url, '.torrent') }}
        shell: bash
        run: |
          cd build
          wget -O image.img "${{ matrix.img_download_url }}"

      - name: "DEBUG"
        run: |
          cd build
          ls -la

      - name: ":closed_lock_with_key: Verify image"
        run: |
          cd build
          sha256sum -c image.hash

      - name: ":heavy_plus_sign: Copy generic and type scripts"
        run: |
          cp -r scripts/generic/* scripts/
          cp -r scripts/${{ matrix.type }}/* scripts/

      - name: "üèó Run CustoPiZer"
        uses: OctoPrint/CustoPiZer@main
        with:
          workspace: "${{ github.workspace }}/build"
          scripts:  "${{ github.workspace }}/scripts"
          environment: '{ "RELEASE_TAG": "${{ env.RELEASE_TAG }}" }'
