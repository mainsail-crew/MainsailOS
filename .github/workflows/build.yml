name: "Build Images"

on:
  push:
    branches:
      - "develop"
  workflow_dispatch:

concurrency:
  group: ci-build-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate matrix from config.yml
        id: create-matrix
        run: |
          python3 - <<'EOF'
          import os, yaml, json
          with open("config.yml", "r") as f:
              config = yaml.safe_load(f)
          matrix = {"include": config}
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"matrix={json.dumps(matrix)}", file=fh)
          EOF

  build:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: "üì• Checkout"
        uses: actions/checkout@v4

      - name: "üõ† Create directories"
        run: |
          mkdir -p build
          mkdir -p scripts

      - name: "‚¨á Download hash"
        id: hash
        shell: bash
        run: |
          cd build
          FILENAME=$(basename ${{ matrix.img_hash_url }})
          wget -O ${FILENAME} ${{  matrix.img_hash_url }}
          FILE_CONTENT=$(head -n 1 $FILENAME)
          CHECKSUM=$(echo "$FILE_CONTENT" | cut -d' ' -f1)

          echo "CHECKSUM=${CHECKSUM}" >> $GITHUB_OUTPUT
          echo "FILENAME=${FILENAME}" >> $GITHUB_OUTPUT

      - name: "‚¨á Download Image via Torrent"
        if: ${{ endsWith(matrix.img_download_url, '.torrent') }}
        shell: bash
        run: |
          aria2c -d build --seed-time=0 "${{ matrix.img_download_url }}"

      - name: "‚¨á Download Image via wget"
        if: ${{ !endsWith(matrix.img_download_url, '.torrent') }}
        shell: bash
        run: |
          cd build
          wget ${{ matrix.img_download_url }}

      - name: "DEBUG"
        run: |
          cd build
          ls -la

      - name: "üîê Verify image"
        run: |
          cd build
          sha256sum -b ${{ steps.hash.outputs.FILENAME }}

      - name: "üõ† Unpack and rename image"
        run: |
          cd build
          rm -f *.sha256

          # search for the image file in the build directory
          IMG_FILE=$(ls *.img.xz | head -n 1)
          echo "Found compressed Image file: ${IMG_FILE}"

          # extract the image file
          xz -d "${IMG_FILE}"

          DECOMPRESSED_FILE="${IMG_FILE%.xz}"
          echo "Image file: ${DECOMPRESSED_FILE}"

          # rename the image file
          mv "${DECOMPRESSED_FILE}" input.img

          # delete the compressed image file
          rm -f "${IMG_FILE}"

      - name: "DEBUG"
        run: |
          cd build
          ls -la

      - name: "üìã Copy generic and type scripts"
        run: |
          cp -r scripts/generic/* scripts/
          cp -r scripts/${{ matrix.type }}/* scripts/

      - name: "üèó Run CustoPiZer"
        uses: OctoPrint/CustoPiZer@main
        with:
          workspace: "${{ github.workspace }}/build"
          scripts:  "${{ github.workspace }}/scripts"
          environment: '{ "RELEASE_TAG": "${{ env.RELEASE_TAG }}" }'
